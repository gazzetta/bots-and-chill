// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  clerkId     String       @unique
  email       String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  apiKeys     ExchangeKey[]
}

model ExchangeKey {
  id          String    @id @default(uuid())
  userId      String
  exchange    String    // e.g., "binance", "bybit"
  name        String    // e.g., "Binance Spot Testnet"
  apiKey      String
  apiSecret   String
  isTestnet   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  bots        Bot[]

  @@unique([userId, exchange, isTestnet])
}

model TradingPair {
  id              String    @id @default(uuid())
  exchange        String    // e.g., "binance", "bybit"
  symbol          String    // e.g., "BTC/USDT"
  baseAsset       String    // e.g., "BTC"
  quoteAsset      String    // e.g., "USDT"
  minQuantity     Float
  maxQuantity     Float
  stepSize        Float
  minNotional     Float
  isSpot          Boolean   @default(true)
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  bots            Bot[]

  @@unique([exchange, symbol, isSpot])
}

model SystemConfig {
  id              String    @id @default(uuid())
  key             String    @unique
  value           String
  updatedAt       DateTime  @updatedAt

  @@index([key])
}

model Bot {
  id                    String   @id @default(cuid())
  userId                String
  name                  String
  pairId                String
  exchangeKeyId         String
  baseOrderSize         Float
  maxSafetyOrders      Int
  priceDeviation       Float
  safetyOrderSize      Float
  safetyOrderPriceStep  Float
  safetyOrderVolumeStep Float
  takeProfit            Float
  mode                 String   // 'normal' or 'reverse'
  status               String   // 'running', 'stopped', etc.
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  deals                 Deal[]

  pair        TradingPair @relation(fields: [pairId], references: [id])
  exchangeKey ExchangeKey @relation(fields: [exchangeKeyId], references: [id])

  @@index([userId])
  @@index([pairId])
  @@index([exchangeKeyId])
}

model Deal {
  id              String      @id @default(cuid())
  botId           String      
  bot             Bot         @relation(fields: [botId], references: [id])
  status          DealStatus  @default(PENDING)
  warningMessage  String?     // Add this field for partial setup warnings
  actualSafetyOrders Int     @default(0)  // Track how many SOs were actually placed
  startedAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  closedAt        DateTime?   

  // All orders in this deal
  orders          Order[]     @relation("DealOrders")
  
  // Current Position Info
  currentQuantity  Float    
  averagePrice     Float    
  totalCost        Float    
  currentProfit    Float    
  
  // Deal History
  histories       DealHistory[]

  @@index([botId])
}

model Order {
  id              String      @id @default(uuid())
  dealId          String
  deal            Deal        @relation("DealOrders", fields: [dealId], references: [id])
  type            OrderType   
  side            OrderSide   
  status          OrderStatus @default(PENDING)
  symbol          String      
  quantity        Float       
  price           Float       
  filled          Float       
  remaining       Float       
  cost            Float       
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  filledAt        DateTime?   
  exchangeOrderId  String    

  @@index([dealId])
}

model DealHistory {
  id          String      @id @default(cuid())
  dealId      String
  deal        Deal        @relation(fields: [dealId], references: [id])
  type        HistoryType
  orderId     String?     
  oldValue    Json?       
  newValue    Json        
  timestamp   DateTime    @default(now())

  @@index([dealId])
}

enum DealStatus {
  PENDING     // Just created, waiting for orders to be placed
  ACTIVE      // Base order placed successfully
  COMPLETED   // Take profit hit or manually closed
  FAILED      // Error occurred during setup
  CANCELLED   // Manually cancelled before completion
}

enum OrderType {
  BASE
  SAFETY
  TAKE_PROFIT
}

enum OrderStatus {
  PENDING     // Just created
  PLACED      // Successfully placed on exchange
  PARTIALLY_FILLED
  FILLED
  CANCELLED
  FAILED
}

enum OrderSide {
  BUY
  SELL
}

enum HistoryType {
  DEAL_CREATED
  ORDER_PLACED
  ORDER_FILLED
  SAFETY_ORDER_TRIGGERED
  TP_UPDATED
  DEAL_CLOSED
  WARNING           // Add this enum value
  ERROR
}
