generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String        @id @default(uuid())
  clerkId   String        @unique
  email     String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  apiKeys   ExchangeKey[]
}

model ExchangeKey {
  id        String   @id @default(uuid())
  userId    String
  exchange  String
  name      String
  apiKey    String
  apiSecret String
  isTestnet Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bots      Bot[]
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, exchange, isTestnet])
}

model TradingPair {
  id          String   @id @default(uuid())
  exchange    String
  symbol      String
  baseAsset   String
  quoteAsset  String
  minQuantity Decimal  @db.Decimal(20, 8)
  maxQuantity Decimal  @db.Decimal(20, 8)
  stepSize    Decimal  @db.Decimal(20, 8)
  minNotional Decimal  @db.Decimal(20, 8)
  isSpot      Boolean  @default(true)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bots        Bot[]

  @@unique([exchange, symbol, isSpot])
}

model SystemConfig {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String
  updatedAt DateTime @updatedAt

  @@index([key])
}

model Bot {
  id                    String      @id @default(cuid())
  userId                String
  pairId                String
  baseOrderSize         Decimal     @db.Decimal(20, 8)
  maxSafetyOrders       Int
  priceDeviation        Decimal     @db.Decimal(20, 8)
  safetyOrderSize       Decimal     @db.Decimal(20, 8)
  safetyOrderPriceStep  Decimal     @db.Decimal(20, 8)
  safetyOrderVolumeStep Decimal     @db.Decimal(20, 8)
  takeProfit            Decimal     @db.Decimal(20, 8)
  mode                  String
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  name                  String
  exchangeKeyId         String
  status                BotStatus   @default(STOPPED)
  exchangeKey           ExchangeKey @relation(fields: [exchangeKeyId], references: [id])
  pair                  TradingPair @relation(fields: [pairId], references: [id])
  deals                 Deal[]

  @@index([userId])
  @@index([pairId])
  @@index([exchangeKeyId])
}

model Deal {
  id                 String        @id @default(cuid())
  botId              String
  status             DealStatus    @default(PENDING)
  startedAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  closedAt           DateTime?
  currentQuantity    Decimal       @db.Decimal(20, 8)
  averagePrice       Decimal       @db.Decimal(20, 8)
  totalCost          Decimal       @db.Decimal(20, 8)
  currentProfit      Decimal       @db.Decimal(20, 8)
  actualSafetyOrders Int           @default(0)
  warningMessage     String?
  bot                Bot           @relation(fields: [botId], references: [id])
  histories          DealHistory[]
  orders             Order[]       @relation("DealOrders")

  @@index([botId])
}

model Order {
  id              String      @id @default(uuid())
  dealId          String
  type            OrderType
  side            OrderSide
  method          OrderMethod @default(LIMIT)
  status          OrderStatus @default(PENDING)
  symbol          String
  quantity        Decimal     @db.Decimal(20, 8)
  price           Decimal     @db.Decimal(20, 8)
  filled          Decimal     @db.Decimal(20, 8)
  remaining       Decimal     @db.Decimal(20, 8)
  cost            Decimal     @db.Decimal(20, 8)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  filledAt        DateTime?
  exchangeOrderId String
  deal            Deal        @relation("DealOrders", fields: [dealId], references: [id])

  @@index([dealId])
}

model DealHistory {
  id        String      @id @default(cuid())
  dealId    String
  type      HistoryType
  orderId   String?
  oldValue  Json?
  newValue  Json
  timestamp DateTime    @default(now())
  deal      Deal        @relation(fields: [dealId], references: [id])

  @@index([dealId])
}

enum BotStatus {
  RUNNING
  STOPPED
  ERROR
}

enum DealStatus {
  PENDING
  ACTIVE
  COMPLETED
  FAILED
  CANCELLED
}

enum OrderType {
  BASE
  SAFETY
  TAKE_PROFIT
}

enum OrderStatus {
  PENDING
  PLACED
  PARTIALLY_FILLED
  FILLED
  CANCELLED
  FAILED
}

enum OrderSide {
  BUY
  SELL
}

enum HistoryType {
  DEAL_CREATED
  ORDER_PLACED
  ORDER_FILLED
  SAFETY_ORDER_TRIGGERED
  TP_UPDATED
  DEAL_CLOSED
  ERROR
  WARNING
}

enum OrderMethod {
  MARKET
  LIMIT
}
